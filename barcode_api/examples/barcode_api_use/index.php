<?php
	require("barcode/barcode.class.php");
	$bar	= new BARCODE();
?>

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
	<head>
		<title>Ultimate Barcode Generator - API Examples</title>
		<link type="text/css" href="assets/css/style.css"  rel="stylesheet" />
		<link type="text/css" href="assets/css/snippet.css"  rel="stylesheet" />
		<script type="text/javascript" src="assets/js/jquery.1.6.4.js" ></script>
		<script type="text/javascript" src="assets/js/snippet.js" ></script>
		<script>
			$(document).ready(function() {
				$("pre.phpCode").snippet("php",{style:"emacs",transparent:true,menu:true,showNum:false});
				$("pre.phpCode_2").snippet("php",{style:"emacs",transparent:true,menu:true,showNum:true});
			});
		</script>
	</head>

	<body>
		
		<div class="header">
			<div class="logo">
				<img src="assets/img/logo.png" />
			</div>
			<div class="menu">
				<a class="selected" href="index.php">Overview</a> | 
				<a href="_all_barcodes.php">All barcodes</a> | 
				<a href="_all_qrcodes.php">All Qr-Codes</a> | 
				<a href="_all_1dcodes.php">All 1D-Codes</a> | 
				<a href="_other_examples.php">Other examples</a>
			</div>
			<br clear="all" />
		</div>
		
		<div class="wrapper">
			
			
			<h1>Welcome to UTLIMATE BARCODE GENERATOR!</h1>
			<h2 class="newversion">New barcode generator version 3.0</h2>
			<p>This project is a neat effort of creating a class that enables all kind of operations related to<br/>
			<strong>BarCodes, QRCodes, DataMatrix and PDF417</strong> using simple code and API.<br/>
			No need to rely on external API... You can have your own API NOW!</p>
			<p>Today is quite easy to find a qrcode generator, or a qrcode class, or even maybe some codebar generator or class.<br/>
			But what about a class to handle all of them? What about a class that allows us to create a image, force download or save to a location with <strong>only three lines of code</strong>?</p>
			<br/>
			
			<p>So here are all the features:</p>
			
			<ul>
				<li>9 QRCode types: Link, SMS, Email, Phone Number, VCard, meCard, Wifi, Geolocation and Bulk Text.</li>
					<li>10 Barcode types: UPC-A, UPC-E, EAN-8, EAN-13, CODE39, CODE93, CODE128, POSTNET, CODABAR and ISBN</li>
					<li><strong>NEW ON V3.0</strong> Datamatrix code generator.</li>
					<li><strong>NEW ON V3.0</strong> PDF417 code generator.</li>
					<li><strong>NEW ON V3.0</strong> Option to show or hide the data in 1D Barcodes.</li>
					<li>All barcodes are generated by code. <strong>No external API usage</strong></li>
					<li>After class initialize, <strong>one line of code</strong> does all the necessary steps and configuratios to generate code.</li>
					<li>Configuration of size and colors on the same <strong>one line of code</strong> generating the code.</li>
					<li>12 methods. Generate, force download and save, for every type of code.</li>
					<li>1 PHP processor file to generate codes via POST or GET. API USAGE.</li>
					<li>Support for AJAX querys via POST or GET to processor file</li>
					<li>Clean and well documented code.</li>
			</ul>
			<br/>
			<br/>
			<br/>
			
			<h3>Package main files:</h3>
			
			<pre><strong>barcode.class.php</strong></pre>
			This is the main class file. As mentioned above it offers 6 different methods for barcode and qrcode operations. This class can be called directly and we can use the methods explained on the next topic.
			<br/>
			<br/>
			<pre><strong>barcode.processor.php</strong></pre>
			This is like a engine file. This PHP script can produce all operations. It's main use is for barcode and qrcode operations using POST or GET. It allows you to, for example, use a form for codes generating. It is also prepared for AJAX querys, so you can make barcode and qrcode operations with AJAX. It also helps with the code image render or forced download using HEADERS so you can display or force a download image without saving the file on filesystem.
			<br/>
			<br/>
			<br/>
			<br/>
			<br/>
			
			
			<h3>Examples included:</h3>
			
			As you can see in this example, there are all kind of examples. Although, with the suplied code you will have access to all the files. AJAX (JQuery) examples, API usage, and all barcodes and QRCodes generating examples.
			<br/>
			<br/>
			<br/>
			<br/>
			<br/>
			
						
			<h3>Configuration os <span>barcode.class.php</span> file:</h3>
			This file has only one configuration step, and it can bo most of the time optional. On line #44 there is a variable called <span class="monospace">_PROCESSOR_LOCATION_</span> that holds the location of itself and together with <span class="monospace">barcode_processor.php</span>. If this two files are located on any folder of tree level down, the script will work. But if they are in the same location as the calling file then you have to set it to = "" or you can also set it to an absolute path, making it always working properlly.
			<br/>
			<br/>
			<br/>
			<br/>
			<br/>
			
			
			<h3>About the methods available on <span>barcode.class.php</span> to use:</h3>
			
			<pre><a href="#BarCode_link"><strong>BarCode_link()</strong></a>    -> Used to retrieve a BARCODE link to show in html. No files are created, all headers</pre>
			<pre><a href="#QRCode_link"><strong>QRCode_link()</strong></a>     -> Used to retrieve a QRCODE link to show in html. No files are created, all headers</pre>
			<pre><a href="#DataMatrix_link"><strong>DataMatrix_link()</strong></a> -> Used to retrieve a DataMatrix link to show in html. No files are created, all headers</pre>
			<pre><a href="#PDF417_link"><strong>PDF417_link()</strong></a>     -> Used to retrieve a PDF417 link to show in html. No files are created, all headers</pre>
			<br/>
			<pre><a href="#BarCode_dl"><strong>BarCode_dl()</strong></a>      -> Used to retrieve a BARCODE link with headers download. Use as link or follow it and download pops up</pre>
			<pre><a href="#QRCode_dl"><strong>QRCode_dl()</strong></a>       -> Used to retrieve a QRCODE link with headers download. Use as link or follow it and download pops up</pre>
			<pre><a href="#DataMatrix_dl"><strong>DataMatrix_dl()</strong></a>   -> Used to retrieve a DataMatrix link with headers download. Use as link or follow it and download pops up</pre>
			<pre><a href="#PDF417_dl"><strong>PDF417_dl()</strong></a>       -> Used to retrieve a PDF417 link with headers download. Use as link or follow it and download pops up</pre>
			<br/>
			<pre><a href="#BarCode_save"><strong>BarCode_save()</strong></a>    -> Used to save a BARCODE on specified location. Also retrieves link to file.</pre>
			<pre><a href="#QRCode_save"><strong>QRCode_save()</strong></a>     -> Used to save a QRCODE on specified location. Also retrieves link to file.</pre>
			<pre><a href="#DataMatrix_save"><strong>DataMatrix_save()</strong></a> -> Used to save a DataMatrix on specified location. Also retrieves link to file.</pre>
			<pre><a href="#PDF417_save"><strong>PDF417_save()</strong></a>     -> Used to save a PDF417 on specified location. Also retrieves link to file.</pre>
			<br/>
			<br/>
			<br/>
			<br/>
			
			
			
			
			
			<a name="BarCode_link"></a>
			<h3>Method <span>BarCode_link()</span> details:</h3>
			This method, used to retrieve a BARCODE link for code display, has the following sintax:
			<br/>
			<pre class="phpCode">BarCode_link($encoding, $bardata, $height, $scale, $bgcolor, $barcolor, $showData)</pre>
			Use examples:
<pre class="phpCode_2">
&lt;?php
require(&quot;barcode/barcode.class.php&quot;);
$bar = new BARCODE();
// Simple use with only the two mandatory parameters
$link1 = $bar-&gt;BarCode_link(&quot;UPC-A&quot;, &quot;123456789012&quot;);
// Extended use with all parameters
$link2 = $bar-&gt;BarCode_link(&quot;CODE39&quot;, &quot;ABC12%&quot;, 60, 2, &quot;#ff0000&quot;, &quot;#ffffff&quot;);
// Different uses
echo '&lt;img src=&quot;'.$link1.'&quot; /&gt;';
echo '&lt;img src=&quot;'.$link2.'&quot; /&gt;';
?&gt;
</pre>
Shortest form:
<pre class="phpCode_2">
&lt;?php
require(&quot;barcode/barcode.class.php&quot;);
$bar = new BARCODE();
echo &quot;&lt;img src='&quot;.$bar-&gt;BarCode_link(&quot;UPC-A&quot;, &quot;123456789012&quot;).&quot;' /&gt;&quot;;
?&gt;
</pre>
			<div class="method">
				<div class="method_head">
					<h4><span>$encoding</span></h4>
					<h5><span>string</span></h5>
					<br clear="all" />
				</div>
				This parameter will tell <span class="monospace">BarCode_link()</span> wich barcode are we generating. Note that possible values are:<br/>(UPC-A, UPC-E, EAN-8, EAN-13, CODE39, CODE93, CODE128, POSTNET, CODABAR or ISBN)
				<br/>
				<br/>
				<br/>
				<div class="method_head">
					<h4><span>$bardata</span></h4>
					<h5><span>string</span></h5>
					<br clear="all" />
				</div>
				This parameter will supply <span class="monospace">BarCode_link()</span> with the data to convert to barcode. Depending on the barcode generating we have specific characters allowed and in some a maximun number of characters. See <a href="_all_barcodes.php">ALL BARCODES</a> for more info on allowed charcaters and maximun number.
				<br/>
				<br/>
				<br/>
				<div class="method_head">
					<h4><span>$height</span></h4>
					<h5>(optional <small>default = 50</small>) <span>integer</span></h5>
					<br clear="all" />
				</div>
				This parameter will tell <span class="monospace">BarCode_link()</span> the desired height. This is an integer value. It will be considered pixels and multiplied by scale to find the final height. So for example you set the height of 50 and the scale will be 2 so total height will be 100px
				<br/>
				<br/>
				<br/>
				<div class="method_head">
					<h4><span>$scale</span></h4>
					<h5>(optional <small>default = 2</small>) <span>integer</span></h5>
					<br clear="all" />
				</div>
				This parameter will tell <span class="monospace">BarCode_link()</span> the desired scale. Scale is used as a multiplier for height and also a scale of barcode lenght. Due to barcode standarts, widths must be consistent so instead of desired width, wich is impossible due to variable lenght of data, we set a scale and control the final fixed height and width scale.
				<br/>
				<br/>
				<br/>
				<div class="method_head">
					<h4><span>$bgcolor</span></h4>
					<h5>(optional <small>default = "#ffffff"</small>) <span>string</span></h5>
					<br clear="all" />
				</div>
				This parameter will tell <span class="monospace">BarCode_link()</span> the desired background color in hexadecimal format.
				<br/>
				<br/>
				<br/>
				<div class="method_head">
					<h4><span>$barcolor</span></h4>
					<h5>(optional <small>default = "#000000"</small>) <span>string</span></h5>
					<br clear="all" />
				</div>
				This parameter will tell <span class="monospace">BarCode_link()</span> the desired foreground color (bars) in hexadecimal format.
				<br/>
				<br/>
				<br/>
				<div class="method_head">
					<h4><span>$showData</span></h4>
					<h5>(optional <small>default = 1</small>) <span>boolean</span></h5>
					<br clear="all" />
				</div>
				This parameter will tell <span class="monospace">BarCode_link()</span> if we want to show the encoded data with the barcode. Accepted values are (1 or 0).
			</div>
			<br/>
			<br/>
			<br/>
			<br/>
			<br/>
			
			
			
			
			
			<a name="QRCode_link"></a>
			<h3>Method <span>QRCode_link()</span> details:</h3>
			This method, used to retrieve a QRCODE link for code display, has the following sintax:
			<br/>
			<pre class="phpCode">QRCode_link($qrdata_type, $data, $height, $scale, $bgcolor, $barcolor, $ECLevel, $margin)</pre>
			Use examples:
<pre class="phpCode_2">
&lt;?php
require(&quot;barcode/barcode.class.php&quot;);
$bar = new BARCODE();
// Simple use with only the two mandatory parameters
$qr_values[0]    = 'Hello world!';
$link1 = $bar-&gt;QRCode_link(&quot;text&quot;, $qr_values);
// Extended use with all parameters
$qr_values[0]    = 'Hello world!';
$link2 = $bar-&gt;QRCode_link(&quot;text&quot;, $qr_values, 60, 2);
// Different uses
echo '&lt;img src=&quot;'.$link1.'&quot; /&gt;';
echo '&lt;img src=&quot;'.$link2.'&quot; /&gt;';
?&gt;
</pre>
Shortest form:
<pre class="phpCode_2">
&lt;?php
require(&quot;barcode/barcode.class.php&quot;);
$bar = new BARCODE();
$qr_values[0]    = 'Hello world!';
echo &quot;&lt;img src='&quot;.$bar-&gt;QRCode_link(&quot;text&quot;, $qr_values).&quot;' /&gt;&quot;;
?&gt;
</pre>
			<div class="method">
				<div class="method_head">
					<h4><span>$qrdata_type</span></h4>
					<h5><span>string</span></h5>
					<br clear="all" />
				</div>
				This parameter will tell <span class="monospace">QRCode_link()</span> wich metadata are we generating. Note that possible values are:<br/>(text, link, sms, email, phone, vcard, mecard, wifi or geo)
				<br/>
				<br/>
				<br/>
				<div class="method_head">
					<h4><span>$data</span></h4>
					<h5><span>array</span></h5>
					<br clear="all" />
				</div>
				This parameter will supply <span class="monospace">QRCode_link()</span> with the data to convert to qrcode. Depending on the qrcode generating we have different content and order for the array. See <a href="_all_qrcodes.php">ALL QRCODES</a> for more info on array values and order.
				<br/>
				<br/>
				<br/>
				<div class="method_head">
					<h4><span>$height</span></h4>
					<h5>(optional <small>default = 50</small>) <span>integer</span></h5>
					<br clear="all" />
				</div>
				This parameter will tell <span class="monospace">QRCode_link()</span> the desired height. This is an integer value. It will be considered pixels and multiplied by scale to find the final height. So for example you set the height of 50 and the scale will be 2 so total height will be 100px (ALSO NOTE that it will set the same width)
				<br/>
				<br/>
				<br/>
				<div class="method_head">
					<h4><span>$scale</span></h4>
					<h5>(optional <small>default = 2</small>) <span>integer</span></h5>
					<br clear="all" />
				</div>
				This parameter will tell <span class="monospace">QRCode_link()</span> the desired scale. Scale is used as a multiplier for height.
				<br/>
				<br/>
				<br/>
				<div class="method_head">
					<h4><span>$bgcolor</span></h4>
					<h5>(optional <small>default = "#ffffff"</small>) <span>string</span></h5>
					<br clear="all" />
				</div>
				This parameter will tell <span class="monospace">QRCode_link()</span> the desired background color in hexadecimal format.
				<br/>
				<br/>
				<br/>
				<div class="method_head">
					<h4><span>$barcolor</span></h4>
					<h5>(optional <small>default = "#000000"</small>) <span>string</span></h5>
					<br clear="all" />
				</div>
				This parameter will tell <span class="monospace">QRCode_link()</span> the desired foreground color (bars) in hexadecimal format.
				<br/>
				<br/>
				<br/>
				<div class="method_head">
					<h4><span>$ECLevel</span></h4>
					<h5>(optional <small>default = "L"</small>) <span>string</span></h5>
					<br clear="all" />
				</div>
				This parameter will tell <span class="monospace">QRCode_link()</span> the desired Error Correction Level. Allowed values are (L; M; Q or H)
				<br/>
				<br/>
				<br/>
				<div class="method_head">
					<h4><span>$margin</span></h4>
					<h5>(optional <small>default = true</small>) <span>boolean</span></h5>
					<br clear="all" />
				</div>
				This parameter will tell <span class="monospace">QRCode_link()</span> to either use a margin around the QRCode or not. Remeber that margin size will vary having in mind the data complexity, ECC Level, and QRCode size.
				
			</div>
			<br/>
			<br/>
			<br/>
			<br/>
			<br/>
			
			
			
			
			
			<a name="DataMatrix_link"></a>
			<h3>Method <span>DataMatrix_link()</span> details:</h3>
			This method, used to retrieve a DataMatrix link for code display, has the following sintax:
			<br/>
			<pre class="phpCode">DataMatrix_link($data, $height, $width, $margin, $bgcolor, $barcolor)</pre>
			Use examples:
<pre class="phpCode_2">
&lt;?php
require(&quot;barcode/barcode.class.php&quot;);
$bar = new BARCODE();
// Simple use with only the mandatory parameter
$link1 = $bar-&gt;DataMatrix_link(&quot;Hello World!&quot;);
// Extended use with all parameters
$link2 = $bar-&gt;DataMatrix_link(&quot;Hello World!&quot;, 200, 200, 20, "#ff6600", "#ffffff");
// Use the links
echo '&lt;img src=&quot;'.$link1.'&quot; /&gt;';
echo '&lt;img src=&quot;'.$link2.'&quot; /&gt;';
?&gt;
</pre>
Shortest form:
<pre class="phpCode_2">
&lt;?php
require(&quot;barcode/barcode.class.php&quot;);
$bar = new BARCODE();
echo &quot;&lt;img src='&quot;.$bar-&gt;DataMatrix_link(&quot;Hello World!&quot;).&quot;' /&gt;&quot;;
?&gt;
</pre>
			<div class="method">
				<div class="method_head">
					<h4><span>$data</span></h4>
					<h5><span>string</span></h5>
					<br clear="all" />
				</div>
				This parameter will supply <span class="monospace">DataMatrix_link()</span> with the data to convert to DataMatrix Code.
				<br/>
				<br/>
				<br/>
				<div class="method_head">
					<h4><span>$height</span></h4>
					<h5>(optional <small>default = 100</small>) <span>integer</span></h5>
					<br clear="all" />
				</div>
				This parameter will tell <span class="monospace">DataMatrix_link()</span> the desired height. This is an integer value. It will be considered pixels.
				<br/>
				<br/>
				<br/>
				<div class="method_head">
					<h4><span>$width</span></h4>
					<h5>(optional <small>default = 100</small>) <span>integer</span></h5>
					<br clear="all" />
				</div>
				This parameter will tell <span class="monospace">DataMatrix_link()</span> the desired width. This is an integer value. It will be considered pixels.
				<br/>
				<br/>
				<br/>
				<div class="method_head">
					<h4><span>$margin</span></h4>
					<h5>(optional <small>default = 10</small>) <span>integer</span></h5>
					<br clear="all" />
				</div>
				This parameter will tell <span class="monospace">DataMatrix_link()</span> the value in pixels for the margin.
				<br/>
				<br/>
				<br/>
				<div class="method_head">
					<h4><span>$bgcolor</span></h4>
					<h5>(optional <small>default = "#ffffff"</small>) <span>string</span></h5>
					<br clear="all" />
				</div>
				This parameter will tell <span class="monospace">DataMatrix_link()</span> the desired background color in hexadecimal format.
				<br/>
				<br/>
				<br/>
				<div class="method_head">
					<h4><span>$barcolor</span></h4>
					<h5>(optional <small>default = "#000000"</small>) <span>string</span></h5>
					<br clear="all" />
				</div>
				This parameter will tell <span class="monospace">DataMatrix_link()</span> the desired foreground color (bars) in hexadecimal format.
				
			</div>
			<br/>
			<br/>
			<br/>
			<br/>
			<br/>
			
			
			
			
			<a name="PDF417_link"></a>
			<h3>Method <span>PDF417_link()</span> details:</h3>
			This method, used to retrieve a PDF417 link for code display, has the following sintax:
			<br/>
			<pre class="phpCode">PDF417_link($data, $height, $width, $margin, $bgcolor, $barcolor, $ECLevel)</pre>
			Use examples:
<pre class="phpCode_2">
&lt;?php
require(&quot;barcode/barcode.class.php&quot;);
$bar = new BARCODE();
// Simple use with only the mandatory parameter
$link1 = $bar-&gt;PDF417_link(&quot;Hello World!&quot;);
// Extended use with all parameters
$link2 = $bar-&gt;PDF417_link(&quot;Hello World!&quot;, 200, 650, 20, "#ff6600", "#ffffff", 6);
// Use the links
echo '&lt;img src=&quot;'.$link1.'&quot; /&gt;';
echo '&lt;img src=&quot;'.$link2.'&quot; /&gt;';
?&gt;
</pre>
Shortest form:
<pre class="phpCode_2">
&lt;?php
require(&quot;barcode/barcode.class.php&quot;);
$bar = new BARCODE();
echo &quot;&lt;img src='&quot;.$bar-&gt;PDF417_link(&quot;Hello World!&quot;).&quot;' /&gt;&quot;;
?&gt;
</pre>
			<div class="method">
				<div class="method_head">
					<h4><span>$data</span></h4>
					<h5><span>string</span></h5>
					<br clear="all" />
				</div>
				This parameter will supply <span class="monospace">PDF417_link()</span> with the data to convert to PDF417 Code.
				<br/>
				<br/>
				<br/>
				<div class="method_head">
					<h4><span>$height</span></h4>
					<h5>(optional <small>default = 100</small>) <span>integer</span></h5>
					<br clear="all" />
				</div>
				This parameter will tell <span class="monospace">PDF417_link()</span> the desired height. This is an integer value. It will be considered pixels.
				<br/>
				<br/>
				<br/>
				<div class="method_head">
					<h4><span>$width</span></h4>
					<h5>(optional <small>default = 250</small>) <span>integer</span></h5>
					<br clear="all" />
				</div>
				This parameter will tell <span class="monospace">PDF417_link()</span> the desired width. This is an integer value. It will be considered pixels.
				<br/>
				<br/>
				<br/>
				<div class="method_head">
					<h4><span>$margin</span></h4>
					<h5>(optional <small>default = 10</small>) <span>integer</span></h5>
					<br clear="all" />
				</div>
				This parameter will tell <span class="monospace">PDF417_link()</span> the value in pixels for the margin.
				<br/>
				<br/>
				<br/>
				<div class="method_head">
					<h4><span>$bgcolor</span></h4>
					<h5>(optional <small>default = "#ffffff"</small>) <span>string</span></h5>
					<br clear="all" />
				</div>
				This parameter will tell <span class="monospace">PDF417_link()</span> the desired background color in hexadecimal format.
				<br/>
				<br/>
				<br/>
				<div class="method_head">
					<h4><span>$barcolor</span></h4>
					<h5>(optional <small>default = "#000000"</small>) <span>string</span></h5>
					<br clear="all" />
				</div>
				This parameter will tell <span class="monospace">PDF417_link()</span> the desired foreground color (bars) in hexadecimal format.
				<br/>
				<br/>
				<br/>
				<div class="method_head">
					<h4><span>$ECLevel</span></h4>
					<h5>(optional <small>default = -1</small>) <span>integer</span></h5>
					<br clear="all" />
				</div>
				This parameter will tell <span class="monospace">PDF417_link()</span> the desired Error Correction Level. Allowed values are (0 to 8) or (-1 for auto)
			</div>
			<br/>
			<br/>
			<br/>
			<br/>
			<br/>
			
			
			
			
			
			
			<a name="BarCode_dl"></a>
			<h3>Method <span>BarCode_dl()</span> details:</h3>
			This method, used to force a HTTP Header download of a BARCODE image, has the following sintax:
			<br/>
			<pre class="phpCode">BarCode_dl($encoding, $bardata, $file, $type, $height, $scale, $bgcolor, $barcolor, $showData)</pre>
			Use examples:
<pre class="phpCode_2">
&lt;?php
require(&quot;barcode/barcode.class.php&quot;);
$bar = new BARCODE();
// Simple use with only the three mandatory parameters
$link_one          = $bar->BarCode_dl("UPC-A", "12", "filename_one");
// Extended use with all parameters
$link_two          = $bar->BarCode_dl("UPC-A", "12", "filename_two", "png", 60, 2, "#ff0000", "#0000ff");
// Different uses
echo $link1;
echo &quot;&lt;a href='&quot;.$link2.&quot;' &gt;LINK&lt;/a&gt;&quot;;
?&gt;
</pre>
Shortest form:
<pre class="phpCode_2">
&lt;?php
require(&quot;barcode/barcode.class.php&quot;);
$bar = new BARCODE();
echo &quot;&lt;a href='&quot;.$bar->BarCode_dl("UPC-A", "12", "filename_one").&quot;' &gt;LINK&lt;/a&gt;&quot;;
?&gt;
</pre>
			<div class="method">
				<div class="method_head">
					<h4><span>$encoding</span></h4>
					<h5><span>string</span></h5>
					<br clear="all" />
				</div>
				This parameter will tell <span class="monospace">BarCode_dl()</span> wich barcode are we generating. Note that possible values are:<br/>(UPC-A, UPC-E, EAN-8, EAN-13, CODE39, CODE93, CODE128, POSTNET, CODABAR or ISBN)
				<br/>
				<br/>
				<br/>
				<div class="method_head">
					<h4><span>$bardata</span></h4>
					<h5><span>string</span></h5>
					<br clear="all" />
				</div>
				This parameter will supply <span class="monospace">BarCode_dl()</span> with the data to convert to barcode. Depending on the barcode generating we have specific characters allowed and in some a maximun number of characters. See <a href="_all_barcodes.php">ALL BARCODES</a> for more info on allowed charcaters and maximun number.
				<br/>
				<br/>
				<br/>
				<div class="method_head">
					<h4><span>$file</span></h4>
					<h5><span>string</span></h5>
					<br clear="all" />
				</div>
				This parameter will supply <span class="monospace">BarCode_dl()</span> with the filename desired so it can force a HTML Header download with the supplied filename.
				<br/>
				<br/>
				<br/>
				<div class="method_head">
					<h4><span>$type</span></h4>
					<h5>(optional <small>default = "png"</small>) <span>string</span></h5>
					<br clear="all" />
				</div>
				This parameter will tell <span class="monospace">BarCode_dl()</span> what filetype (image) it will be generated. Supported values are jpg, png or gif
				<br/>
				<br/>
				<br/>
				<div class="method_head">
					<h4><span>$height</span></h4>
					<h5>(optional <small>default = 50</small>) <span>integer</span></h5>
					<br clear="all" />
				</div>
				This parameter will tell <span class="monospace">BarCode_dl()</span> the desired height. This is an integer value. It will be considered pixels and multiplied by scale to find the final height. So for example you set the height of 50 and the scale will be 2 so total height will be 100px
				<br/>
				<br/>
				<br/>
				<div class="method_head">
					<h4><span>$scale</span></h4>
					<h5>(optional <small>default = 2</small>) <span>integer</span></h5>
					<br clear="all" />
				</div>
				This parameter will tell <span class="monospace">BarCode_dl()</span> the desired scale. Scale is used as a multiplier for height and also a scale of barcode lenght. Due to barcode standarts, widths must be consistent so instead of desired width, wich is impossible due to variable lenght of data, we set a scale and control the final fixed height and width scale.
				<br/>
				<br/>
				<br/>
				<div class="method_head">
					<h4><span>$bgcolor</span></h4>
					<h5>(optional <small>default = "#ffffff"</small>) <span>string</span></h5>
					<br clear="all" />
				</div>
				This parameter will tell <span class="monospace">BarCode_dl()</span> the desired background color in hexadecimal format.
				<br/>
				<br/>
				<br/>
				<div class="method_head">
					<h4><span>$barcolor</span></h4>
					<h5>(optional <small>default = "#000000"</small>) <span>string</span></h5>
					<br clear="all" />
				</div>
				This parameter will tell <span class="monospace">BarCode_dl()</span> the desired foreground color (bars) in hexadecimal format.
				<br/>
				<br/>
				<br/>
				<div class="method_head">
					<h4><span>$showData</span></h4>
					<h5>(optional <small>default = 1</small>) <span>boolean</span></h5>
					<br clear="all" />
				</div>
				This parameter will tell <span class="monospace">BarCode_link()</span> if we want to show the encoded data with the barcode. Accepted values are (1 or 0).
			</div>
			<br/>
			<br/>
			<br/>
			<br/>
			<br/>
			
			
			
			
			
			<a name="QRCode_dl"></a>
			<h3>Method <span>QRCode_dl()</span> details:</h3>
			This method, used to force a HTTP Header download of a QRCODE image. Note that QRCodes do not allow color configurations and are provided ONLY in PNG format. The method has the following sintax:
			<br/>
			<pre class="phpCode">QRCode_dl($qrdata_type, $data, $file, $height, $scale, $bgcolor, $barcolor, $ECLevel, $margin)</pre>
			Use examples:
<pre class="phpCode_2">
&lt;?php
require(&quot;barcode/barcode.class.php&quot;);
$bar = new BARCODE();
// Simple use with only the three mandatory parameters
$qr_values[0]    = 'Hello world!';
$link1   	    = $bar->QRCode_dl('text', $qr_values, 'filename');
// Extended use with all parameters
$qr_values[0]    = 'Hello world!';
$link2    	   = $bar->QRCode_dl('text', $qr_values,'filename', 50, 2);
// Different uses
echo $link1;
echo &quot;&lt;a href='&quot;.$link2.&quot;' &gt;LINK&lt;/a&gt;&quot;;
?&gt;
</pre>
Shortest form:
<pre class="phpCode_2">
&lt;?php
require(&quot;barcode/barcode.class.php&quot;);
$bar = new BARCODE();
$qr_values[0]    = 'Hello world!';
echo &quot;&lt;a href='&quot;.$bar->QRCode_dl('text', $qr_values, 'filename').&quot;' &gt;LINK&lt;/a&gt;&quot;;
?&gt;
</pre>
			<div class="method">
				<div class="method_head">
					<h4><span>$qrdata_type</span></h4>
					<h5><span>string</span></h5>
					<br clear="all" />
				</div>
				This parameter will tell <span class="monospace">QRCode_dl()</span> wich metadata are we generating. Note that possible values are:<br/>(text, link, sms, email, phone, vcard, mecard, wifi or geo)
				<br/>
				<br/>
				<br/>
				<div class="method_head">
					<h4><span>$data</span></h4>
					<h5><span>array</span></h5>
					<br clear="all" />
				</div>
				This parameter will supply <span class="monospace">QRCode_dl()</span> with the data to convert to qrcode. Depending on the qrcode generating we have different content and order for the array. See <a href="_all_qrcodes.php">ALL QRCODES</a> for more info on array values and order.
				<br/>
				<br/>
				<br/>
				<div class="method_head">
					<h4><span>$file</span></h4>
					<h5><span>string</span></h5>
					<br clear="all" />
				</div>
				This parameter will supply <span class="monospace">QRCode_dl()</span> with the filename desired so it can force a HTML Header download with the supplied filename.
				<br/>
				<br/>
				<br/>
				<div class="method_head">
					<h4><span>$height</span></h4>
					<h5>(optional <small>default = 50</small>) <span>integer</span></h5>
					<br clear="all" />
				</div>
				This parameter will tell <span class="monospace">QRCode_dl()</span> the desired height. This is an integer value. It will be considered pixels and multiplied by scale to find the final height. So for example you set the height of 50 and the scale will be 2 so total height will be 100px (ALSO NOTE that it will set the same width)
				<br/>
				<br/>
				<br/>
				<div class="method_head">
					<h4><span>$scale</span></h4>
					<h5>(optional <small>default = 2</small>) <span>integer</span></h5>
					<br clear="all" />
				</div>
				This parameter will tell <span class="monospace">QRCode_dl()</span> the desired scale. Scale is used as a multiplier for height.
				<br/>
				<br/>
				<br/>
				<div class="method_head">
					<h4><span>$bgcolor</span></h4>
					<h5>(optional <small>default = "#ffffff"</small>) <span>string</span></h5>
					<br clear="all" />
				</div>
				This parameter will tell <span class="monospace">QRCode_dl()</span> the desired background color in hexadecimal format.
				<br/>
				<br/>
				<br/>
				<div class="method_head">
					<h4><span>$barcolor</span></h4>
					<h5>(optional <small>default = "#000000"</small>) <span>string</span></h5>
					<br clear="all" />
				</div>
				This parameter will tell <span class="monospace">QRCode_dl()</span> the desired foreground color (bars) in hexadecimal format.
				<br/>
				<br/>
				<br/>
				<div class="method_head">
					<h4><span>$ECLevel</span></h4>
					<h5>(optional <small>default = "L"</small>) <span>string</span></h5>
					<br clear="all" />
				</div>
				This parameter will tell <span class="monospace">QRCode_dl()</span> the desired Error Correction Level. Allowed values are (L; M; Q or H)
				<br/>
				<br/>
				<br/>
				<div class="method_head">
					<h4><span>$margin</span></h4>
					<h5>(optional <small>default = true</small>) <span>boolean</span></h5>
					<br clear="all" />
				</div>
				This parameter will tell <span class="monospace">QRCode_dl()</span> to either use a margin around the QRCode or not. Remeber that margin size will vary having in mind the data complexity, ECC Level, and QRCode size.
			</div>
			<br/>
			<br/>
			<br/>
			<br/>
			<br/>
			
			
			
			
			
			<a name="DataMatrix_dl"></a>
			<h3>Method <span>DataMatrix_dl()</span> details:</h3>
			This method, used to retrieve a DataMatrix link for code display, has the following sintax:
			<br/>
			<pre class="phpCode">DataMatrix_dl($data, $file, $height, $width, $margin, $bgcolor, $barcolor)</pre>
			Use examples:
<pre class="phpCode_2">
&lt;?php
require(&quot;barcode/barcode.class.php&quot;);
$bar = new BARCODE();
// Simple use with only the mandatory parameters
$link1 = $bar->DataMatrix_dl('Hello world!', 'filename');
// Extended use with all parameters
$link2 = $bar->DataMatrix_dl('Hello world!', 'filename', 50, 2, 15, "#ff6600", "#ffffff");
// Different uses
echo $link1;
echo &quot;&lt;a href='&quot;.$link2.&quot;' &gt;LINK&lt;/a&gt;&quot;;
?&gt;
</pre>
Shortest form:
<pre class="phpCode_2">
&lt;?php
require(&quot;barcode/barcode.class.php&quot;);
$bar = new BARCODE();
echo &quot;&lt;a href='&quot;.$bar->DataMatrix_dl('Hello world!', 'filename').&quot;' &gt;LINK&lt;/a&gt;&quot;;
?&gt;
</pre>
			<div class="method">
				<div class="method_head">
					<h4><span>$data</span></h4>
					<h5><span>string</span></h5>
					<br clear="all" />
				</div>
				This parameter will supply <span class="monospace">DataMatrix_dl()</span> with the data to convert to DataMatrix Code.
				<br/>
				<br/>
				<br/>
				<div class="method_head">
					<h4><span>$file</span></h4>
					<h5><span>string</span></h5>
					<br clear="all" />
				</div>
				This parameter will supply <span class="monospace">DataMatrix_dl()</span> with the filename desired so it can force a HTML Header download with the supplied filename.
				<br/>
				<br/>
				<br/>
				<div class="method_head">
					<h4><span>$height</span></h4>
					<h5>(optional <small>default = 100</small>) <span>integer</span></h5>
					<br clear="all" />
				</div>
				This parameter will tell <span class="monospace">DataMatrix_dl()</span> the desired height. This is an integer value. It will be considered pixels.
				<br/>
				<br/>
				<br/>
				<div class="method_head">
					<h4><span>$width</span></h4>
					<h5>(optional <small>default = 100</small>) <span>integer</span></h5>
					<br clear="all" />
				</div>
				This parameter will tell <span class="monospace">DataMatrix_dl()</span> the desired width. This is an integer value. It will be considered pixels.
				<br/>
				<br/>
				<br/>
				<div class="method_head">
					<h4><span>$margin</span></h4>
					<h5>(optional <small>default = 10</small>) <span>integer</span></h5>
					<br clear="all" />
				</div>
				This parameter will tell <span class="monospace">DataMatrix_dl()</span> the value in pixels for the margin.
				<br/>
				<br/>
				<br/>
				<div class="method_head">
					<h4><span>$bgcolor</span></h4>
					<h5>(optional <small>default = "#ffffff"</small>) <span>string</span></h5>
					<br clear="all" />
				</div>
				This parameter will tell <span class="monospace">DataMatrix_dl()</span> the desired background color in hexadecimal format.
				<br/>
				<br/>
				<br/>
				<div class="method_head">
					<h4><span>$barcolor</span></h4>
					<h5>(optional <small>default = "#000000"</small>) <span>string</span></h5>
					<br clear="all" />
				</div>
				This parameter will tell <span class="monospace">DataMatrix_dl()</span> the desired foreground color (bars) in hexadecimal format.
				
			</div>
			<br/>
			<br/>
			<br/>
			<br/>
			<br/>
			
			
			
			
			
			
			<a name="PDF417_dl"></a>
			<h3>Method <span>PDF417_dl()</span> details:</h3>
			This method, used to retrieve a DataMatrix link for code display, has the following sintax:
			<br/>
			<pre class="phpCode">PDF417_dl($data, $file, $height, $width, $margin, $bgcolor, $barcolor, $ECLevel)</pre>
			Use examples:
<pre class="phpCode_2">
&lt;?php
require(&quot;barcode/barcode.class.php&quot;);
$bar = new BARCODE();
// Simple use with only the mandatory parameters
$link1 = $bar->PDF417_dl('Hello world!', 'filename');
// Extended use with all parameters
$link2 = $bar->PDF417_dl('Hello world!', 'filename', 50, 2, 15, "#ff6600", "#ffffff", 5);
// Different uses
echo $link1;
echo &quot;&lt;a href='&quot;.$link2.&quot;' &gt;LINK&lt;/a&gt;&quot;;
?&gt;
</pre>
Shortest form:
<pre class="phpCode_2">
&lt;?php
require(&quot;barcode/barcode.class.php&quot;);
$bar = new BARCODE();
echo &quot;&lt;a href='&quot;.$bar->PDF417_dl('Hello world!', 'filename').&quot;' &gt;LINK&lt;/a&gt;&quot;;
?&gt;
</pre>
			<div class="method">
				<div class="method_head">
					<h4><span>$data</span></h4>
					<h5><span>string</span></h5>
					<br clear="all" />
				</div>
				This parameter will supply <span class="monospace">PDF417_dl()</span> with the data to convert to DataMatrix Code.
				<br/>
				<br/>
				<br/>
				<div class="method_head">
					<h4><span>$file</span></h4>
					<h5><span>string</span></h5>
					<br clear="all" />
				</div>
				This parameter will supply <span class="monospace">PDF417_dl()</span> with the filename desired so it can force a HTML Header download with the supplied filename.
				<br/>
				<br/>
				<br/>
				<div class="method_head">
					<h4><span>$height</span></h4>
					<h5>(optional <small>default = 100</small>) <span>integer</span></h5>
					<br clear="all" />
				</div>
				This parameter will tell <span class="monospace">PDF417_dl()</span> the desired height. This is an integer value. It will be considered pixels.
				<br/>
				<br/>
				<br/>
				<div class="method_head">
					<h4><span>$width</span></h4>
					<h5>(optional <small>default = 250</small>) <span>integer</span></h5>
					<br clear="all" />
				</div>
				This parameter will tell <span class="monospace">PDF417_dl()</span> the desired width. This is an integer value. It will be considered pixels.
				<br/>
				<br/>
				<br/>
				<div class="method_head">
					<h4><span>$margin</span></h4>
					<h5>(optional <small>default = 10</small>) <span>integer</span></h5>
					<br clear="all" />
				</div>
				This parameter will tell <span class="monospace">PDF417_dl()</span> the value in pixels for the margin.
				<br/>
				<br/>
				<br/>
				<div class="method_head">
					<h4><span>$bgcolor</span></h4>
					<h5>(optional <small>default = "#ffffff"</small>) <span>string</span></h5>
					<br clear="all" />
				</div>
				This parameter will tell <span class="monospace">PDF417_dl()</span> the desired background color in hexadecimal format.
				<br/>
				<br/>
				<br/>
				<div class="method_head">
					<h4><span>$barcolor</span></h4>
					<h5>(optional <small>default = "#000000"</small>) <span>string</span></h5>
					<br clear="all" />
				</div>
				This parameter will tell <span class="monospace">PDF417_dl()</span> the desired foreground color (bars) in hexadecimal format.
				<br/>
				<br/>
				<br/>
				<div class="method_head">
					<h4><span>$ECLevel</span></h4>
					<h5>(optional <small>default = -1</small>) <span>integer</span></h5>
					<br clear="all" />
				</div>
				This parameter will tell <span class="monospace">PDF417_dl()</span> the desired Error Correction Level. Allowed values are (0 to 8) or (-1 for auto)
			</div>
			<br/>
			<br/>
			<br/>
			<br/>
			<br/>
			
			
			
			
			
			
			<a name="BarCode_save"></a>
			<h3>Method <span>BarCode_save()</span> details:</h3>
			This method is used to save a BARCODE image on the filesystem. Note that this methods returns nothing, instead sets a $_SESSION var called <span class="monospace">$_SESSION["_CREATED_FILE_"]</span> containing the file URL if you want to use. The path you should already know because you set it with the method. The method has the following sintax:
			<br/>
			<pre class="phpCode">BarCode_save($encoding, $bardata, $file, $folder, $type, $height, $scale, $bgcolor, $barcolor, $showData)</pre>
			Use examples:
<pre class="phpCode_2">
&lt;?php
require(&quot;barcode/barcode.class.php&quot;);
$bar = new BARCODE();
// Simple use with only the four mandatory parameters. File will be saved in scripts folder
$bar->BarCode_save("UPC-A", "12", "filename_one", "./");
// Extended use with all parameters
$bar->BarCode_save("UPC-A", "12", "filename_two", "./", "png", 60, 2, "#ff0000", "#0000ff");
// Uses (REMEMBER $_SESSION["_CREATED_FILE_"] will be overwritten when you call BarCode_save)
echo &quot;&lt;img src='&quot;.$_SESSION["_CREATED_FILE_"].&quot;' /&gt;&quot;;
?&gt;
</pre>
Shortest form:
<pre class="phpCode_2">
&lt;?php
require(&quot;barcode/barcode.class.php&quot;);
$bar = new BARCODE();
$bar->BarCode_save("UPC-A", "12", "filename_one", "./");
?&gt;
</pre>
			<div class="method">
				<div class="method_head">
					<h4><span>$encoding</span></h4>
					<h5><span>string</span></h5>
					<br clear="all" />
				</div>
				This parameter will tell <span class="monospace">BarCode_save()</span> wich barcode are we generating. Note that possible values are:<br/>(UPC-A, UPC-E, EAN-8, EAN-13, CODE39, CODE93, CODE128, POSTNET, CODABAR or ISBN)
				<br/>
				<br/>
				<br/>
				<div class="method_head">
					<h4><span>$bardata</span></h4>
					<h5><span>string</span></h5>
					<br clear="all" />
				</div>
				This parameter will supply <span class="monospace">BarCode_save()</span> with the data to convert to barcode. Depending on the barcode generating we have specific characters allowed and in some a maximun number of characters. See <a href="_all_barcodes.php">ALL BARCODES</a> for more info on allowed charcaters and maximun number.
				<br/>
				<br/>
				<br/>
				<div class="method_head">
					<h4><span>$file</span></h4>
					<h5><span>string</span></h5>
					<br clear="all" />
				</div>
				This parameter will supply <span class="monospace">BarCode_save()</span> with the filename desired so it can force a HTML Header download with the supplied filename.
				<br/>
				<br/>
				<br/>
				<div class="method_head">
					<h4><span>$folder</span></h4>
					<h5><span>string</span></h5>
					<br clear="all" />
				</div>
				This parameter will supply <span class="monospace">BarCode_save()</span> with the desired folder to save the file. NOTE that this parameter must represent the relative path to your SCRIPT's ROOT FOLDER. You can use values like "./" to write the file to the same folder as your script, or "../" to write to one folder down of your script or "../another_folder/" to write in a another_folder wich is on folder down of your script. Also it must end with trailing slash. You can also use absolute path, but then the <span class="monospace">$_SESSION["_CREATED_FILE_"]</span> will be useless.
				<br/>
				<br/>
				<br/>
				<div class="method_head">
					<h4><span>$type</span></h4>
					<h5>(optional <small>default = "png"</small>) <span>string</span></h5>
					<br clear="all" />
				</div>
				This parameter will tell <span class="monospace">BarCode_save()</span> what filetype (image) it will be generated. Supported values are jpg, png or gif
				<br/>
				<br/>
				<br/>
				<div class="method_head">
					<h4><span>$height</span></h4>
					<h5>(optional <small>default = 50</small>) <span>integer</span></h5>
					<br clear="all" />
				</div>
				This parameter will tell <span class="monospace">BarCode_save()</span> the desired height. This is an integer value. It will be considered pixels and multiplied by scale to find the final height. So for example you set the height of 50 and the scale will be 2 so total height will be 100px
				<br/>
				<br/>
				<br/>
				<div class="method_head">
					<h4><span>$scale</span></h4>
					<h5>(optional <small>default = 2</small>) <span>integer</span></h5>
					<br clear="all" />
				</div>
				This parameter will tell <span class="monospace">BarCode_save()</span> the desired scale. Scale is used as a multiplier for height and also a scale of barcode lenght. Due to barcode standarts, widths must be consistent so instead of desired width, wich is impossible due to variable lenght of data, we set a scale and control the final fixed height and width scale.
				<br/>
				<br/>
				<br/>
				<div class="method_head">
					<h4><span>$bgcolor</span></h4>
					<h5>(optional <small>default = "#ffffff"</small>) <span>string</span></h5>
					<br clear="all" />
				</div>
				This parameter will tell <span class="monospace">BarCode_save()</span> the desired background color in hexadecimal format.
				<br/>
				<br/>
				<br/>
				<div class="method_head">
					<h4><span>$barcolor</span></h4>
					<h5>(optional <small>default = "#000000"</small>) <span>string</span></h5>
					<br clear="all" />
				</div>
				This parameter will tell <span class="monospace">BarCode_save()</span> the desired foreground color (bars) in hexadecimal format.
				<br/>
				<br/>
				<br/>
				<div class="method_head">
					<h4><span>$showData</span></h4>
					<h5>(optional <small>default = 1</small>) <span>boolean</span></h5>
					<br clear="all" />
				</div>
				This parameter will tell <span class="monospace">BarCode_link()</span> if we want to show the encoded data with the barcode. Accepted values are (1 or 0).
			</div>
			<br/>
			<br/>
			<br/>
			<br/>
			<br/>
			
			
			
			
			
			
			<a name="QRCode_save"></a>
			<h3>Method <span>QRCode_save()</span> details:</h3>
			This method is used to save a QRCODE image on the filesystem. Note that this methods returns nothing, instead sets a $_SESSION var called $_SESSION["_CREATED_FILE_"] containing the file URL if you want to use. The path you should already know because you set it with the method. The method has the following sintax: 
			<br/>
			<pre class="phpCode">QRCode_save($qrdata_type, $data, $file, $folder, $height, $scale, $bgcolor, $barcolor, $ECLevel, $margin)</pre>
			Use examples:
<pre class="phpCode_2">
&lt;?php
require(&quot;barcode/barcode.class.php&quot;);
$bar = new BARCODE();
// Simple use with only the four mandatory parameters
$qr_values[0]    = 'Hello world!';
$bar->QRCode_save('text', $qr_values, 'filename', './');
// Extended use with all parameters
$qr_values[0]    = 'Hello world!';
$bar->QRCode_save('text', $qr_values,'filename', './', 50, 2);
// Uses (REMEMBER $_SESSION["_CREATED_FILE_"] will be overwritten when you call BarCode_save)
echo "&lt;img src='&quot;.$_SESSION[&quot;_CREATED_FILE_&quot;].&quot;' /&gt;";
?&gt;
</pre>
Shortest form:
<pre class="phpCode_2">
&lt;?php
require(&quot;barcode/barcode.class.php&quot;);
$bar = new BARCODE();
$qr_values[0]    = 'Hello world!';
$bar->QRCode_save('text', $qr_values, 'filename', './');
?&gt;
</pre>
			<div class="method">
				<div class="method_head">
					<h4><span>$qrdata_type</span></h4>
					<h5><span>string</span></h5>
					<br clear="all" />
				</div>
				This parameter will tell <span class="monospace">QRCode_save()</span> wich metadata are we generating. Note that possible values are:<br/>(text, link, sms, email, phone, vcard, mecard, wifi or geo)
				<br/>
				<br/>
				<br/>
				<div class="method_head">
					<h4><span>$data</span></h4>
					<h5><span>array</span></h5>
					<br clear="all" />
				</div>
				This parameter will supply <span class="monospace">QRCode_save()</span> with the data to convert to qrcode. Depending on the qrcode generating we have different content and order for the array. See <a href="_all_qrcodes.php">ALL QRCODES</a> for more info on array values and order.
				<br/>
				<br/>
				<br/>
				<div class="method_head">
					<h4><span>$file</span></h4>
					<h5><span>string</span></h5>
					<br clear="all" />
				</div>
				This parameter will supply <span class="monospace">QRCode_save()</span> with the filename desired so it can force a HTML Header download with the supplied filename.
				<br/>
				<br/>
				<br/>
				<div class="method_head">
					<h4><span>$folder</span></h4>
					<h5><span>string</span></h5>
					<br clear="all" />
				</div>
				This parameter will supply <span class="monospace">QRCode_save()</span> with the desired folder to save the file. NOTE that this parameter must represent the relative path to your SCRIPT's ROOT FOLDER. You can use values like "./" to write the file to the same folder as your script, or "../" to write to one folder down of your script or "../another_folder/" to write in a another_folder wich is on folder down of your script. Also it must end with trailing slash. You can also use absolute path, but then the <span class="monospace">$_SESSION["_CREATED_FILE_"]</span> will be useless.
				<br/>
				<br/>
				<br/>
				<div class="method_head">
					<h4><span>$height</span></h4>
					<h5>(optional <small>default = 50</small>) <span>integer</span></h5>
					<br clear="all" />
				</div>
				This parameter will tell <span class="monospace">QRCode_save()</span> the desired height. This is an integer value. It will be considered pixels and multiplied by scale to find the final height. So for example you set the height of 50 and the scale will be 2 so total height will be 100px (ALSO NOTE that it will set the same width)
				<br/>
				<br/>
				<br/>
				<div class="method_head">
					<h4><span>$scale</span></h4>
					<h5>(optional <small>default = 2</small>) <span>integer</span></h5>
					<br clear="all" />
				</div>
				This parameter will tell <span class="monospace">QRCode_save()</span> the desired scale. Scale is used as a multiplier for height.
				<br/>
				<br/>
				<br/>
				<div class="method_head">
					<h4><span>$bgcolor</span></h4>
					<h5>(optional <small>default = "#ffffff"</small>) <span>string</span></h5>
					<br clear="all" />
				</div>
				This parameter will tell <span class="monospace">QRCode_save()</span> the desired background color in hexadecimal format.
				<br/>
				<br/>
				<br/>
				<div class="method_head">
					<h4><span>$barcolor</span></h4>
					<h5>(optional <small>default = "#000000"</small>) <span>string</span></h5>
					<br clear="all" />
				</div>
				This parameter will tell <span class="monospace">QRCode_save()</span> the desired foreground color (bars) in hexadecimal format.
				<br/>
				<br/>
				<br/>
				<div class="method_head">
					<h4><span>$ECLevel</span></h4>
					<h5>(optional <small>default = "L"</small>) <span>string</span></h5>
					<br clear="all" />
				</div>
				This parameter will tell <span class="monospace">QRCode_save()</span> the desired Error Correction Level. Allowed values are (L; M; Q or H)
				<br/>
				<br/>
				<br/>
				<div class="method_head">
					<h4><span>$margin</span></h4>
					<h5>(optional <small>default = true</small>) <span>boolean</span></h5>
					<br clear="all" />
				</div>
				This parameter will tell <span class="monospace">QRCode_save()</span> to either use a margin around the QRCode or not. Remeber that margin size will vary having in mind the data complexity, ECC Level, and QRCode size.
			</div>
			<br/>
			<br/>
			<br/>
			<br/>
			<br/>
			
			
			
			
			
			
			<a name="DataMatrix_save"></a>
			<h3>Method <span>DataMatrix_save()</span> details:</h3>
			This method is used to save a DataMatrix image on the filesystem. Note that this methods returns nothing, instead sets a $_SESSION var called <span class="monospace">$_SESSION["_CREATED_FILE_"]</span> containing the file URL if you want to use. The path you should already know because you set it with the method. The method has the following sintax:
			<br/>
			<pre class="phpCode">DataMatrix_save($bardata, $file, $folder, $height, $width, $margin, $bgcolor, $barcolor)</pre>
			Use examples:
<pre class="phpCode_2">
&lt;?php
require(&quot;barcode/barcode.class.php&quot;);
$bar = new BARCODE();
// Simple use with only the mandatory parameters. File will be saved in scripts folder
$bar->BarCode_save("Hello World!", "filename_one", "./");
// Extended use with all parameters
$bar->BarCode_save("Hello World!", "filename_two", "./", 150, 150, 15, "#ff0000", "#0000ff");
// Uses (REMEMBER $_SESSION["_CREATED_FILE_"] will be overwritten when you call BarCode_save)
echo &quot;&lt;img src='&quot;.$_SESSION["_CREATED_FILE_"].&quot;' /&gt;&quot;;
?&gt;
</pre>
Shortest form:
<pre class="phpCode_2">
&lt;?php
require(&quot;barcode/barcode.class.php&quot;);
$bar = new BARCODE();
$bar->BarCode_save("Hello World!", "filename_one", "./");
?&gt;
</pre>
			<div class="method">
				<div class="method_head">
					<h4><span>$bardata</span></h4>
					<h5><span>string</span></h5>
					<br clear="all" />
				</div>
				This parameter will supply <span class="monospace">BarCode_save()</span> with the data to convert to DataMatrix.
				<br/>
				<br/>
				<br/>
				<div class="method_head">
					<h4><span>$file</span></h4>
					<h5><span>string</span></h5>
					<br clear="all" />
				</div>
				This parameter will supply <span class="monospace">BarCode_save()</span> with the filename desired so it can force a HTML Header download with the supplied filename.
				<br/>
				<br/>
				<br/>
				<div class="method_head">
					<h4><span>$folder</span></h4>
					<h5><span>string</span></h5>
					<br clear="all" />
				</div>
				This parameter will supply <span class="monospace">BarCode_save()</span> with the desired folder to save the file. NOTE that this parameter must represent the relative path to your SCRIPT's ROOT FOLDER. You can use values like "./" to write the file to the same folder as your script, or "../" to write to one folder down of your script or "../another_folder/" to write in a another_folder wich is on folder down of your script. Also it must end with trailing slash. You can also use absolute path, but then the <span class="monospace">$_SESSION["_CREATED_FILE_"]</span> will be useless.
				<br/>
				<br/>
				<br/>
				<div class="method_head">
					<h4><span>$height</span></h4>
					<h5>(optional <small>default = 100</small>) <span>integer</span></h5>
					<br clear="all" />
				</div>
				This parameter will tell <span class="monospace">BarCode_save()</span> the desired height. This is an integer value. It will be considered pixels.
				<br/>
				<br/>
				<br/>
				<div class="method_head">
					<h4><span>$width</span></h4>
					<h5>(optional <small>default = 100</small>) <span>integer</span></h5>
					<br clear="all" />
				</div>
				This parameter will tell <span class="monospace">BarCode_save()</span> the desired width. This is an integer value. It will be considered pixels.
				<br/>
				<br/>
				<br/>
				<div class="method_head">
					<h4><span>$margin</span></h4>
					<h5>(optional <small>default = 10</small>) <span>integer</span></h5>
					<br clear="all" />
				</div>
				This parameter will tell <span class="monospace">BarCode_save()</span> the value in pixels for the margin.
				<br/>
				<br/>
				<br/>
				<div class="method_head">
					<h4><span>$bgcolor</span></h4>
					<h5>(optional <small>default = "#ffffff"</small>) <span>string</span></h5>
					<br clear="all" />
				</div>
				This parameter will tell <span class="monospace">BarCode_save()</span> the desired background color in hexadecimal format.
				<br/>
				<br/>
				<br/>
				<div class="method_head">
					<h4><span>$barcolor</span></h4>
					<h5>(optional <small>default = "#000000"</small>) <span>string</span></h5>
					<br clear="all" />
				</div>
				This parameter will tell <span class="monospace">BarCode_save()</span> the desired foreground color (bars) in hexadecimal format.
			</div>
			<br/>
			<br/>
			<br/>
			<br/>
			<br/>
			
			
			
			
			
			
			<a name="PDF417_save"></a>
			<h3>Method <span>PDF417_save()</span> details:</h3>
			This method is used to save a PDF417 image on the filesystem. Note that this methods returns nothing, instead sets a $_SESSION var called <span class="monospace">$_SESSION["_CREATED_FILE_"]</span> containing the file URL if you want to use. The path you should already know because you set it with the method. The method has the following sintax:
			<br/>
			<pre class="phpCode">DataMatrix_save($bardata, $file, $folder, $height, $width, $margin, $bgcolor, $barcolor, $ECLevel)</pre>
			Use examples:
<pre class="phpCode_2">
&lt;?php
require(&quot;barcode/barcode.class.php&quot;);
$bar = new BARCODE();
// Simple use with only the mandatory parameters. File will be saved in scripts folder
$bar->PDF417_save("Hello World!", "filename_one", "./");
// Extended use with all parameters
$bar->PDF417_save("Hello World!", "filename_two", "./", 150, 300, 15, "#ff0000", "#0000ff", 5);
// Uses (REMEMBER $_SESSION["_CREATED_FILE_"] will be overwritten when you call PDF417_save)
echo &quot;&lt;img src='&quot;.$_SESSION["_CREATED_FILE_"].&quot;' /&gt;&quot;;
?&gt;
</pre>
Shortest form:
<pre class="phpCode_2">
&lt;?php
require(&quot;barcode/barcode.class.php&quot;);
$bar = new BARCODE();
$bar->PDF417_save("Hello World!", "filename_one", "./");
?&gt;
</pre>
			<div class="method">
				<div class="method_head">
					<h4><span>$bardata</span></h4>
					<h5><span>string</span></h5>
					<br clear="all" />
				</div>
				This parameter will supply <span class="monospace">PDF417_save()</span> with the data to convert to PDF417.
				<br/>
				<br/>
				<br/>
				<div class="method_head">
					<h4><span>$file</span></h4>
					<h5><span>string</span></h5>
					<br clear="all" />
				</div>
				This parameter will supply <span class="monospace">PDF417_save()</span> with the filename desired so it can force a HTML Header download with the supplied filename.
				<br/>
				<br/>
				<br/>
				<div class="method_head">
					<h4><span>$folder</span></h4>
					<h5><span>string</span></h5>
					<br clear="all" />
				</div>
				This parameter will supply <span class="monospace">PDF417_save()</span> with the desired folder to save the file. NOTE that this parameter must represent the relative path to your SCRIPT's ROOT FOLDER. You can use values like "./" to write the file to the same folder as your script, or "../" to write to one folder down of your script or "../another_folder/" to write in a another_folder wich is on folder down of your script. Also it must end with trailing slash. You can also use absolute path, but then the <span class="monospace">$_SESSION["_CREATED_FILE_"]</span> will be useless.
				<br/>
				<br/>
				<br/>
				<div class="method_head">
					<h4><span>$height</span></h4>
					<h5>(optional <small>default = 100</small>) <span>integer</span></h5>
					<br clear="all" />
				</div>
				This parameter will tell <span class="monospace">PDF417_save()</span> the desired height. This is an integer value. It will be considered pixels.
				<br/>
				<br/>
				<br/>
				<div class="method_head">
					<h4><span>$width</span></h4>
					<h5>(optional <small>default = 250</small>) <span>integer</span></h5>
					<br clear="all" />
				</div>
				This parameter will tell <span class="monospace">PDF417_save()</span> the desired width. This is an integer value. It will be considered pixels.
				<br/>
				<br/>
				<br/>
				<div class="method_head">
					<h4><span>$margin</span></h4>
					<h5>(optional <small>default = 10</small>) <span>integer</span></h5>
					<br clear="all" />
				</div>
				This parameter will tell <span class="monospace">PDF417_save()</span> the value in pixels for the margin.
				<br/>
				<br/>
				<br/>
				<div class="method_head">
					<h4><span>$bgcolor</span></h4>
					<h5>(optional <small>default = "#ffffff"</small>) <span>string</span></h5>
					<br clear="all" />
				</div>
				This parameter will tell <span class="monospace">PDF417_save()</span> the desired background color in hexadecimal format.
				<br/>
				<br/>
				<br/>
				<div class="method_head">
					<h4><span>$barcolor</span></h4>
					<h5>(optional <small>default = "#000000"</small>) <span>string</span></h5>
					<br clear="all" />
				</div>
				This parameter will tell <span class="monospace">PDF417_save()</span> the desired foreground color (bars) in hexadecimal format.
				<br/>
				<br/>
				<br/>
				<div class="method_head">
					<h4><span>$ECLevel</span></h4>
					<h5>(optional <small>default = -1</small>) <span>integer</span></h5>
					<br clear="all" />
				</div>
				This parameter will tell <span class="monospace">PDF417_save()</span> the desired Error Correction Level. Allowed values are (0 to 8) or (-1 for auto)
			</div>
			<br/>
			<br/>
			<br/>
			<br/>
			<br/>
			
			
			
			
			
			
			
			
			
			
			
			<h3>About the processor file <span>barcode.processor.php</span> :</h3>
			
			<p>This file serves an important role of the API. It actually works as the request router. Basically it processes the requests and outputs the desired result created by the class.</p>
			
			<p>It respondes to either POST or GET requests, does some initial validation and processes the request. Very usefull and it's a good choice to use instead of the API directly. Also offers compatibility with AJAX requests.</p>
			
			<p>Because it uses HTML HEADER to set de desired result (output image only, force download, or save a file) normally it must be called before any HTML code.</p>
			
			<p>Main feature is you can call <span class="monospace">barcode.processor.php</span> with the appropriate values as a &lt;img&gt; tag SRC, having no problems what so ever with HTML HEADERS</p>
			
			<p>So for example if you call directly:</p>
			
			<pre>http://yourhost/barcode_folder/<strong>barcode.processor.php?encode=CODE128&amp;bdata=AZ123456</strong></pre>
			
			<p>It will automatically output to screen the barcode type CODE128 with the data AZ123456 encoded.</p>
			<br/>
			
			<p>The <span class="monospace">barcode.processor.php</span> accepts a total of 38 parameters. Of course most of them are dependent of anothers. For example if you want to generate a BARCODE of type CODABAR with the encoded value of 123, you use:</p>
			<pre>http://yourhost/barcode_folder/<strong>barcode.processor.php?encode=CODABAR&amp;bdata=123</strong></pre>
			<br/>
			
			<p>Now if you want to generate BARCODE of type UPC-A with the encoded value of 123 in a bigger size, you use:</p>
			<pre>http://yourhost/barcode_folder/<strong>barcode.processor.php?encode=UPC-A&amp;bdata=123&amp;height=100&amp;scale=4</strong></pre>
			<br/>
			
			<p>Now if you want to generate BARCODE of type UPC-E with the encoded value of 123 in a bigger size and different colors</p>
			<pre>http://yourhost/barcode_folder/<strong>barcode.processor.php?encode=UPC-A&amp;bdata=123&amp;height=100&amp;scale=4&amp;color=#ff6600&amp;bgcolor=#000000</strong></pre>
			<br/>
			
			<p>And if you want to generate QRCODE with data type sms you do</p>
			<pre>http://yourhost/barcode_folder/<strong>barcode.processor.php?encode=QRCODE&amp;qrdata_type=sms&amp;qr_sms_phone=55555&amp;qr_sms_msg=msg here</strong></pre>
			<br/>
			
			<p>Last but  not least, is good to know that most of the requests (except the save to file functions) retrieves a link for you to use. That link is actually a processed and propper version of this examples i've shown. Passed trought more extensive validations, and preparing the link to be used. So most of the work, routing work, is done with the processor.</p>
			<br/>
			<br/>
			
			<p>Any doubts, drop me a message at eduardo@voindo.eu<br/>I will answer as fast and well as I can... Promise!<br/>Thank you.<br/>Best regards,<br/>Eduardo</p>
			
			<br/>
			<br/>
			<br/>
			<br/>
			
		</div>
	
	
	</body>
</html>
